Index: DuetPkg/BootSector/GNUmakefile
===================================================================
--- DuetPkg/BootSector/GNUmakefile	(revision 33)
+++ DuetPkg/BootSector/GNUmakefile	(working copy)
@@ -16,10 +16,12 @@
 PP_DEFS += -DIMAGE_BUFFER_LOW=$(IMAGE_BUFFER_LOW)
 PP_DEFS += -DIMAGE_BUFFER_HIGH=$(IMAGE_BUFFER_HIGH)
 PP_DEFS += -DX64_PAGE_TABLE_BASE=$(X64_PAGE_TABLE_BASE)
+PP_DEFS += -DX64_PAGE_TABLE_SIZE=$(X64_PAGE_TABLE_SIZE)
 PP_DEFS += -DSTART64CODESIZE=$(START64CODESIZE)
 PP_DEFS += -DEFI64CODESTART=$(EFI64CODESTART)
 PP_DEFS += -DEFI64CODESIZE=$(EFI64CODESIZE)
 PP_DEFS += -DX64_STACK_TOP=$(X64_STACK_TOP)
+PP_DEFS += -DRESERVED_LOWMEM_END=$(RESERVED_LOWMEM_END)
 PP_DEFS += -DBIOS_VIDEO=$(BIOS_VIDEO)
 ASM=$(EDK_TOOLS_PATH)/Bin/linux/jwasm -bin $(PP_DEFS)
 DLINK=ld
Index: DuetPkg/BootSector/Makefile
===================================================================
--- DuetPkg/BootSector/Makefile	(revision 33)
+++ DuetPkg/BootSector/Makefile	(working copy)
@@ -15,10 +15,12 @@
 PP_DEFS = $(PP_DEFS) /DIMAGE_BUFFER_LOW=$(IMAGE_BUFFER_LOW)
 PP_DEFS = $(PP_DEFS) /DIMAGE_BUFFER_HIGH=$(IMAGE_BUFFER_HIGH)
 PP_DEFS = $(PP_DEFS) /DX64_PAGE_TABLE_BASE=$(X64_PAGE_TABLE_BASE)
+PP_DEFS = $(PP_DEFS) /DX64_PAGE_TABLE_SIZE=$(X64_PAGE_TABLE_SIZE)
 PP_DEFS = $(PP_DEFS) /DSTART64CODESIZE=$(START64CODESIZE)
 PP_DEFS = $(PP_DEFS) /DEFI64CODESTART=$(EFI64CODESTART)
 PP_DEFS = $(PP_DEFS) /DEFI64CODESIZE=$(EFI64CODESIZE)
 PP_DEFS = $(PP_DEFS) /DX64_STACK_TOP=$(X64_STACK_TOP)
+PP_DEFS = $(PP_DEFS) /DRESERVED_LOWMEM_END=$(RESERVED_LOWMEM_END)
 PP_DEFS = $(PP_DEFS) /DBIOS_VIDEO=$(BIOS_VIDEO)
 ASM = $(EDK_TOOLS_PATH)\Bin\Win32\JWASM -bin $(PP_DEFS)
 
Index: DuetPkg/BootSector/efi64.asm
===================================================================
--- DuetPkg/BootSector/efi64.asm	(revision 33)
+++ DuetPkg/BootSector/efi64.asm	(working copy)
@@ -72,12 +72,18 @@
 
     ; build identity mapped page table needed for 64-bit mode
     call    identityMapLongMode
+    cmp     edi, X64_PAGE_TABLE_BASE + X64_PAGE_TABLE_SIZE
+    ja      $ ; stop if page table allocation exceeded
 
     ; setup 16-bit real mode vectors required by BiosVideoThunkDxe
     call    setupRmVectors
     call    setupDebug
 
-    call    readEip
+    ; end of low memory allocation, make sure enough was reserved
+    cmp     edi, RESERVED_LOWMEM_END
+    ja      $ ; stop if low memory allocation exceeded
+
+    call    readEip                       ; copy eip to eax
     lea     ebx, [eax + (dataStart - $)]  ; ebx is dataStart
 
     ; load new GDT
Index: DuetPkg/DxeIpl/DxeIpl.inf
===================================================================
--- DuetPkg/DxeIpl/DxeIpl.inf	(revision 32)
+++ DuetPkg/DxeIpl/DxeIpl.inf	(working copy)
@@ -75,3 +75,4 @@
   *_*_*_CC_FLAGS = -DDEBUG_PRINT_LEVEL=$(DEBUG_PRINT_LEVEL)ull
   *_*_*_CC_FLAGS = -DX64_PAGE_TABLE_BASE=$(X64_PAGE_TABLE_BASE)ull
   *_*_*_CC_FLAGS = -DX64_PAGE_TABLE_SIZE=$(X64_PAGE_TABLE_SIZE)ull
+  *_*_*_CC_FLAGS = -DRESERVED_LOWMEM_END=$(RESERVED_LOWMEM_END)ull
Index: DuetPkg/DxeIpl/HobGeneration.h
===================================================================
--- DuetPkg/DxeIpl/HobGeneration.h	(revision 29)
+++ DuetPkg/DxeIpl/HobGeneration.h	(working copy)
@@ -23,7 +23,7 @@
 
 #include "DxeIpl.h"
 
-#define EFI_MEMORY_BELOW_1MB_START     (X64_PAGE_TABLE_BASE + X64_PAGE_TABLE_SIZE)
+#define EFI_MEMORY_BELOW_1MB_START     (RESERVED_LOWMEM_END)
 #define EFI_MEMORY_BELOW_1MB_END       (640 * 1024) // assume full 640KB available
 #define EFI_MEMORY_STACK_PAGE_NUM      0x20
 
Index: DuetPkg/EfiLdr/EfiLdr.inf
===================================================================
--- DuetPkg/EfiLdr/EfiLdr.inf	(revision 11)
+++ DuetPkg/EfiLdr/EfiLdr.inf	(working copy)
@@ -61,6 +61,7 @@
       :*_*_*_CC_FLAGS = -DIMAGE_BUFFER_HIGH=$(IMAGE_BUFFER_HIGH)
       :*_*_*_CC_FLAGS = -DSTART64CODESIZE=$(START64CODESIZE)
       :*_*_*_CC_FLAGS = -DEFI64CODESIZE=$(EFI64CODESIZE)
+      :*_*_*_CC_FLAGS = -DRESERVED_LOWMEM_END=$(RESERVED_LOWMEM_END)
       :*_*_*_CC_FLAGS = -DDEBUG_PRINT_LEVEL=$(DEBUG_PRINT_LEVEL)
   MSFT:*_*_*_CC_FLAGS = /wd4200
   MSFT:*_*_*_CC_FLAGS = /wd4244
Index: DuetPkg/EfiLdr/SeaBIOS/coreboot.c
===================================================================
--- DuetPkg/EfiLdr/SeaBIOS/coreboot.c	(revision 11)
+++ DuetPkg/EfiLdr/SeaBIOS/coreboot.c	(working copy)
@@ -626,8 +626,8 @@
     // make sure non-DOS memory below 1MB is properly reserved
     add_e820(0xA0000, 0x60000, E820_RESERVED);
 
-    // reserve memory to prevent overwrite of temp IDT
-    add_e820(IMAGE_BUFFER_HIGH, START64CODESIZE + EFI64CODESIZE, E820_RESERVED);
+    // reserve memory starting at 0 to protect RM IVT, temp page tables. etc.
+    add_e820(0, RESERVED_LOWMEM_END, E820_RESERVED);
 
     cbfs_setup();
 }
Index: build-linux.sh
===================================================================
--- build-linux.sh	(revision 33)
+++ build-linux.sh	(working copy)
@@ -2,8 +2,9 @@
 X64_STACK_TOP=0x60000        ;export X64_STACK_TOP=$((X64_STACK_TOP))
 FAKE_NVRAM_BASE=0x70000      ;export FAKE_NVRAM_BASE=$((FAKE_NVRAM_BASE))
 FAKE_NVRAM_SIZE=0x10000      ;export FAKE_NVRAM_SIZE=$((FAKE_NVRAM_SIZE))
-X64_PAGE_TABLE_BASE=0x80000  ;export X64_PAGE_TABLE_BASE=$((X64_PAGE_TABLE_BASE))
+X64_PAGE_TABLE_BASE=0x8000   ;export X64_PAGE_TABLE_BASE=$((X64_PAGE_TABLE_BASE))
 X64_PAGE_TABLE_SIZE=0x6000   ;export X64_PAGE_TABLE_SIZE=$((X64_PAGE_TABLE_SIZE))
+LOWMEM_MISC_SIZE=0x2000      ;export LOWMEM_MISC_SIZE=$((LOWMEM_MISC_SIZE))
 IMAGE_BUFFER_HIGH=0x100000   ;export IMAGE_BUFFER_HIGH=$((IMAGE_BUFFER_HIGH))
 START64CODESIZE=0x2000       ;export START64CODESIZE=$((START64CODESIZE))
 EFI64CODESIZE=0x3000         ;export EFI64CODESIZE=$((EFI64CODESIZE))
@@ -10,11 +11,8 @@
 BIOS_VIDEO=1                 ;export BIOS_VIDEO=$((BIOS_VIDEO))
 GOP_VIDEO=0                  ;export GOP_VIDEO=$((GOP_VIDEO))
 export EFI64CODESTART=$((IMAGE_BUFFER_HIGH+START64CODESIZE))
+export RESERVED_LOWMEM_END=$((X64_PAGE_TABLE_BASE+X64_PAGE_TABLE_SIZE+LOWMEM_MISC_SIZE))
 
-# -----coreboot payload logic assumes-----
-#   IMAGE_BUFFER_HIGH = 0x100000
-#   START64CODESIZE   = 0x2000
-
 export DEBUG_PRINT_LEVEL=0x8000004F
 BUILDTARGET=DEBUG
 TOOL_CHAIN_TAG=GCC47
Index: build-windows.bat
===================================================================
--- build-windows.bat	(revision 33)
+++ build-windows.bat	(working copy)
@@ -22,26 +22,28 @@
 rem   007000-007BFF                     stack (early real mode execution)
 rem   007C00-007DFF                     bootsect.asm
 rem   010000-0101FF                     temp disk read buffer used by Start64.asm
+rem   008000-00DFFF X64_PAGE_TABLE_BASE temp page tables for 64-bit enable
 rem   020000-021FFF IMAGE_BUFFER_LOW    first FAT cluster of EFILDR16 (16 sectors per cluster)
 rem   021800-021FFE IMAGE_BUFFER_LOW    stack (st16_64.asm)
 rem   020000-02FFFF IMAGE_BUFFER_LOW    EFILDR16 (first 64KB)
 rem   050000-05FFFF X64_STACK_TOP       initial x64 stack
 rem   070000-07FFFF FAKE_NVRAM_BASE     UEFI NVRAM emulation memory
-rem   080000-085FFF X64_PAGE_TABLE_BASE temp page tables for 64-bit enable
 rem   100000-xxxxxx IMAGE_BUFFER_HIGH   EFILDR16 (complete)
 
-rem --------these two values are hard-coded in the coreboot payload code--------
+rem --------the cbfstool command line must match these values--------
 set /a IMAGE_BUFFER_HIGH   = 0x100000
 set /a START64CODESIZE     = 0x2000
-rem ----------------------------------------------------------------------------
+rem -----------------------------------------------------------------
 set /a IMAGE_BUFFER_LOW    = 0x20000
 set /a X64_STACK_TOP       = 0x60000
 set /a FAKE_NVRAM_BASE     = 0x70000
 set /a FAKE_NVRAM_SIZE     = 0x10000
-set /a X64_PAGE_TABLE_BASE = 0x80000
+set /a X64_PAGE_TABLE_BASE = 0x8000
 set /a X64_PAGE_TABLE_SIZE = 0x6000
+set /a LOWMEM_MISC_SIZE    = 0x2000
 set /a EFI64CODESIZE       = 0x3000
 set /a EFI64CODESTART      = %IMAGE_BUFFER_HIGH% + %START64CODESIZE%
+set /a RESERVED_LOWMEM_END = %X64_PAGE_TABLE_BASE% + %X64_PAGE_TABLE_SIZE% + %LOWMEM_MISC_SIZE%
 
 rem # optional: display logo during UEFI startup
 set LOGO_FILE=DuetPkg/Coreboot_full_web.bmp
