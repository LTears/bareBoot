Index: MdePkg/Library/BaseLib/X64/ReadGdtr.asm
===================================================================
--- MdePkg/Library/BaseLib/X64/ReadGdtr.asm	(revision 1)
+++ MdePkg/Library/BaseLib/X64/ReadGdtr.asm	(working copy)
@@ -31,7 +31,7 @@
 ;   );
 ;------------------------------------------------------------------------------
 InternalX86ReadGdtr   PROC
-    sgdt    fword ptr [rcx]
+    sgdt    tbyte ptr [rcx]
     ret
 InternalX86ReadGdtr   ENDP
 
Index: MdePkg/Library/BaseLib/X64/ReadIdtr.asm
===================================================================
--- MdePkg/Library/BaseLib/X64/ReadIdtr.asm	(revision 1)
+++ MdePkg/Library/BaseLib/X64/ReadIdtr.asm	(working copy)
@@ -31,7 +31,7 @@
 ;   );
 ;------------------------------------------------------------------------------
 InternalX86ReadIdtr   PROC
-    sidt    fword ptr [rcx]
+    sidt    tbyte ptr [rcx]
     ret
 InternalX86ReadIdtr   ENDP
 
Index: MdePkg/Library/BaseLib/X64/Thunk16.asm
===================================================================
--- MdePkg/Library/BaseLib/X64/Thunk16.asm	(revision 1)
+++ MdePkg/Library/BaseLib/X64/Thunk16.asm	(working copy)
@@ -128,7 +128,7 @@
     ; rdi in the instruction below is indeed bx in 16-bit code
     ;
     DB      66h, 2eh                    ; 2eh is "cs:" segment override
-    lgdt    fword ptr [rdi + (SavedGdt - @Base)]
+    lgdt    tbyte ptr [rdi + (SavedGdt - @Base)]
     DB      66h
     mov     ecx, 0c0000080h
     rdmsr
@@ -149,7 +149,7 @@
 _BackFromUserCode   ENDP
 
 _EntryPoint DD      _ToUserCode - m16Start
-            DW      CODE16
+            DW      _16Code - _NullSeg
 _16Gdtr     LABEL   FWORD
             DW      GDT_SIZE - 1
 _16GdtrBase DQ      _NullSeg
@@ -184,7 +184,7 @@
     retf                                ; execution begins at next instruction
 @RealMode:
     DB      66h, 2eh                    ; CS and operand size override
-    lidt    fword ptr [rsi + (_16Idtr - @Base)]
+    lidt    tbyte ptr [rsi + (_16Idtr - @Base)]
     DB      66h, 61h                    ; popad
     DB      1fh                         ; pop ds
     DB      07h                         ; pop es
@@ -260,7 +260,7 @@
     lea     ax, [rdx + (_BackFromUserCode - m16Start)]  ; offset address
     stosd                               ; [edi] <- return address of user code
   
-    sgdt    fword ptr [rsp + 60h]       ; save GDT stack in argument space
+    sgdt    tbyte ptr [rsp + 60h]       ; save GDT stack in argument space
     movzx   r10, word ptr [rsp + 60h]   ; r10 <- GDT limit 
     lea     r11, [rcx + (InternalAsmThunk16 - SavedCr4) + 0xf]
     and     r11, 0xfffffff0             ; r11 <- 16-byte aligned shadowed GDT table in real mode buffer
@@ -276,7 +276,7 @@
     mov     rcx, r10                    ; restore the orignal rcx before memory copy
     mov     rdi, r11                    ; restore the original rdi before memory copy
     
-    sidt    fword ptr [rsp + 50h]       ; save IDT stack in argument space
+    sidt    tbyte ptr [rsp + 50h]       ; save IDT stack in argument space
     mov     rax, cr0
     mov     [rcx + (SavedCr0 - SavedCr4)], eax
     and     eax, 7ffffffeh              ; clear PE, PG bits
@@ -286,7 +286,7 @@
     mov     esi, r8d                    ; esi <- 16-bit stack segment
     DB      6ah, DATA32                 ; push DATA32
     pop     rdx                         ; rdx <- 32-bit data segment selector
-    lgdt    fword ptr [rcx + (_16Gdtr - SavedCr4)]
+    lgdt    tbyte ptr [rcx + (_16Gdtr - SavedCr4)]
     mov     ss, edx
     pushfq
     lea     edx, [rdx + DATA16 - DATA32]
@@ -298,8 +298,8 @@
     jmp     fword ptr [rcx + (_EntryPoint - SavedCr4)]
 @RetFromRealMode:
     popfq
-    lgdt    fword ptr [rsp + 60h]       ; restore protected mode GDTR
-    lidt    fword ptr [rsp + 50h]       ; restore protected mode IDTR
+    lgdt    tbyte ptr [rsp + 60h]       ; restore protected mode GDTR
+    lidt    tbyte ptr [rsp + 50h]       ; restore protected mode IDTR
     lea     eax, [rbp - sizeof (IA32_REGS)]
     pop     gs
     pop     fs
Index: MdePkg/Library/BaseLib/X64/WriteGdtr.asm
===================================================================
--- MdePkg/Library/BaseLib/X64/WriteGdtr.asm	(revision 1)
+++ MdePkg/Library/BaseLib/X64/WriteGdtr.asm	(working copy)
@@ -31,7 +31,7 @@
 ;   );
 ;------------------------------------------------------------------------------
 InternalX86WriteGdtr  PROC
-    lgdt    fword ptr [rcx]
+    lgdt    tbyte ptr [rcx]
     ret
 InternalX86WriteGdtr  ENDP
 
Index: MdePkg/Library/BaseLib/X64/WriteIdtr.asm
===================================================================
--- MdePkg/Library/BaseLib/X64/WriteIdtr.asm	(revision 1)
+++ MdePkg/Library/BaseLib/X64/WriteIdtr.asm	(working copy)
@@ -33,7 +33,7 @@
 InternalX86WriteIdtr  PROC
     pushfq
     cli
-    lidt    fword ptr [rcx]
+    lidt    tbyte ptr [rcx]
     popfq
     ret
 InternalX86WriteIdtr  ENDP
Index: UefiCpuPkg/Library/CpuExceptionHandlerLib/Ia32/ExceptionHandlerAsm.asm
===================================================================
--- UefiCpuPkg/Library/CpuExceptionHandlerLib/Ia32/ExceptionHandlerAsm.asm	(revision 1)
+++ UefiCpuPkg/Library/CpuExceptionHandlerLib/Ia32/ExceptionHandlerAsm.asm	(working copy)
@@ -41,12 +41,13 @@
 ; exception handler stub table
 ;
 AsmIdtVectorBegin:
+VectorNumber = 0
 REPEAT  32
-    db      6ah        ; push  #VectorNum
-    db      ($ - AsmIdtVectorBegin) / ((AsmIdtVectorEnd - AsmIdtVectorBegin) / 32) ; VectorNum
+    push    VectorNumber
     push    eax
     mov     eax, CommonInterruptEntry
     jmp     eax
+    VectorNumber = VectorNumber + 1
 ENDM
 AsmIdtVectorEnd:
 
Index: UefiCpuPkg/Library/CpuExceptionHandlerLib/X64/ExceptionHandlerAsm.asm
===================================================================
--- UefiCpuPkg/Library/CpuExceptionHandlerLib/X64/ExceptionHandlerAsm.asm	(revision 1)
+++ UefiCpuPkg/Library/CpuExceptionHandlerLib/X64/ExceptionHandlerAsm.asm	(working copy)
@@ -35,12 +35,13 @@
 ALIGN   8
 
 AsmIdtVectorBegin:
+VectorNumber = 0
 REPEAT  32
-    db      6ah        ; push  #VectorNum
-    db      ($ - AsmIdtVectorBegin) / ((AsmIdtVectorEnd - AsmIdtVectorBegin) / 32) ; VectorNum
+    push    VectorNumber
     push    rax
     mov     rax, CommonInterruptEntry
     jmp     rax
+    VectorNumber = VectorNumber + 1
 ENDM
 AsmIdtVectorEnd:
 
