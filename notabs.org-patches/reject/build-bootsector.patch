Index: DuetPkg/BootSector/BootSector.inf
===================================================================
--- DuetPkg/BootSector/BootSector.inf	(revision 1)
+++ DuetPkg/BootSector/BootSector.inf	(working copy)
@@ -20,60 +20,18 @@
   CUSTOM_MAKEFILE                = MSFT|Makefile
   CUSTOM_MAKEFILE                = GCC|GNUmakefile
 
-[Packages]
-  MdePkg/MdePkg.dec
-  DuetPkg/DuetPkg.dec
 
 [Sources]
-  bootsect.asm | INTEL
-  bootsect.asm | MSFT
-  bootsect.S   | GCC 
-
-  bs16.asm     | INTEL
-  bs16.asm     | MSFT
-  bs16.S       | GCC 
-
-  bs32.asm     | INTEL
-  bs32.asm     | MSFT
-  bs32.S       | GCC
- 
-  Gpt.asm      | INTEL
-  Gpt.asm      | MSFT
-  Gpt.S        | GCC
-
-  Mbr.asm      | INTEL
-  Mbr.asm      | MSFT
-  Mbr.S        | GCC
-
-  start.asm    | INTEL
-  start.asm    | MSFT
-  start.S      | GCC
-
-  start16.asm  | INTEL
-  start16.asm  | MSFT
-  start16.S    | GCC
-
-  start32.asm  | INTEL
-  start32.asm  | MSFT
-  start32.S    | GCC
-
-  efi32.asm    | INTEL
-  efi32.asm    | MSFT
-  efi32.S      | GCC
-
-  start64.asm  | INTEL
-  start64.asm  | MSFT
-  start64.S    | GCC
-
-  st16_64.asm  | INTEL
-  st16_64.asm  | MSFT
-  st16_64.S    | GCC
-
-  st32_64.asm  | INTEL
-  st32_64.asm  | MSFT
-  st32_64.S    | GCC
-
-  efi64.asm    | INTEL
-  efi64.asm    | MSFT
-  efi64.S      | GCC
-
+  bootsect.asm
+  bs16.asm
+  bs32.asm
+  Gpt.asm
+  Mbr.asm
+  start.asm
+  start16.asm
+  start32.asm
+  efi32.asm
+  start64.asm
+  st16_64.asm
+  st32_64.asm
+  efi64.asm
Index: DuetPkg/BootSector/GNUmakefile
===================================================================
--- DuetPkg/BootSector/GNUmakefile	(revision 1)
+++ DuetPkg/BootSector/GNUmakefile	(working copy)
@@ -1,37 +1,44 @@
-## @file
-#  Just use host GCC to compile boot sector image.
-#
-#  Copyright (c) 2010 - 2012, Intel Corporation. All rights reserved.<BR>
-#
-#  This program and the accompanying materials
-#  are licensed and made available under the terms and conditions of the BSD License
-#  which accompanies this distribution. The full text of the license may be found at
-#  http://opensource.org/licenses/bsd-license.php
-#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
-#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
-#
-#
-##
-
-ASM=gcc
-DLINK=ld
-
-ASSEMBLY_CODE_FILE_LIST = $(MODULE_DIR)/bootsect.S \
-                          $(MODULE_DIR)/bs16.S \
-                          $(MODULE_DIR)/bs32.S \
-                          $(MODULE_DIR)/efi32.S \
-                          $(MODULE_DIR)/efi64.S \
-                          $(MODULE_DIR)/Gpt.S \
-                          $(MODULE_DIR)/Mbr.S \
-                          $(MODULE_DIR)/start.S \
-                          $(MODULE_DIR)/start16.S \
-                          $(MODULE_DIR)/start32.S \
-                          $(MODULE_DIR)/start64.S \
-                          $(MODULE_DIR)/st16_64.S \
-                          $(MODULE_DIR)/st32_64.S
-
-TARGET_FILES = $(OUTPUT_DIR)/bootsect.com \
-               $(OUTPUT_DIR)/bs16.com \
+## @file
+#  Just use jwasm to compile boot sector image.
+#
+#  Copyright (c) 2010 - 2012, Intel Corporation. All rights reserved.<BR>
+#
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution. The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+#
+##
+
+PP_DEFS += -DIMAGE_BUFFER_LOW=$(IMAGE_BUFFER_LOW)
+PP_DEFS += -DIMAGE_BUFFER_HIGH=$(IMAGE_BUFFER_HIGH)
+PP_DEFS += -DX64_PAGE_TABLE_BASE=$(X64_PAGE_TABLE_BASE)
+PP_DEFS += -DSTART64CODESIZE=$(START64CODESIZE)
+PP_DEFS += -DEFI64CODESTART=$(EFI64CODESTART)
+PP_DEFS += -DEFI64CODESIZE=$(EFI64CODESIZE)
+PP_DEFS += -DX64_STACK_TOP=$(X64_STACK_TOP)
+ASM=$(EDK_TOOLS_PATH)/Bin/linux/jwasm -bin $(PP_DEFS)
+DLINK=ld
+
+ASSEMBLY_CODE_FILE_LIST = $(MODULE_DIR)/bootsect.asm \
+                          $(MODULE_DIR)/bs16.asm \
+                          $(MODULE_DIR)/bs32.asm \
+                          $(MODULE_DIR)/efi32.asm \
+                          $(MODULE_DIR)/efi64.asm \
+                          $(MODULE_DIR)/Gpt.asm \
+                          $(MODULE_DIR)/Mbr.asm \
+                          $(MODULE_DIR)/start.asm \
+                          $(MODULE_DIR)/start16.asm \
+                          $(MODULE_DIR)/start32.asm \
+                          $(MODULE_DIR)/start64.asm \
+                          $(MODULE_DIR)/st16_64.asm \
+                          $(MODULE_DIR)/st32_64.asm
+
+TARGET_FILES = $(OUTPUT_DIR)/bootsect.com \
+               $(OUTPUT_DIR)/bs16.com \
                $(OUTPUT_DIR)/bs32.com \
                $(OUTPUT_DIR)/Gpt.com \
                $(OUTPUT_DIR)/Mbr.com \
@@ -44,93 +51,50 @@
                $(OUTPUT_DIR)/st32_64.com \
                $(OUTPUT_DIR)/efi64.com2
 
-.PHONY : all
-all: $(TARGET_FILES)
-
-# bootsect.S
-$(OUTPUT_DIR)/bootsect.o: $(MODULE_DIR)/bootsect.S
-	$(ASM) -c -o $(OUTPUT_DIR)/bootsect.o $(MODULE_DIR)/bootsect.S
-$(OUTPUT_DIR)/bootsect.com: $(OUTPUT_DIR)/bootsect.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/bootsect.com $(OUTPUT_DIR)/bootsect.o -Ttext 0 -Map $(OUTPUT_DIR)/bootsect.map
-
-# bs16.S
-$(OUTPUT_DIR)/bs16.o: $(MODULE_DIR)/bs16.S
-	$(ASM) -c -o $(OUTPUT_DIR)/bs16.o $(MODULE_DIR)/bs16.S
-$(OUTPUT_DIR)/bs16.com: $(OUTPUT_DIR)/bs16.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/bs16.com $(OUTPUT_DIR)/bs16.o -Ttext 0 -Map $(OUTPUT_DIR)/bs16.map
-
-# bs32.S
-$(OUTPUT_DIR)/bs32.o: $(MODULE_DIR)/bs32.S
-	$(ASM) -c -o $(OUTPUT_DIR)/bs32.o $(MODULE_DIR)/bs32.S
-$(OUTPUT_DIR)/bs32.com: $(OUTPUT_DIR)/bs32.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/bs32.com $(OUTPUT_DIR)/bs32.o -Ttext 0 -Map $(OUTPUT_DIR)/bs32.map
-
-# Gpt.S
-$(OUTPUT_DIR)/Gpt.o: $(MODULE_DIR)/Gpt.S
-	$(ASM) -c -o $(OUTPUT_DIR)/Gpt.o $(MODULE_DIR)/Gpt.S
-$(OUTPUT_DIR)/Gpt.com: $(OUTPUT_DIR)/Gpt.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/Gpt.com $(OUTPUT_DIR)/Gpt.o -Ttext 0 -Map $(OUTPUT_DIR)/Gpt.map
-
-# Mbr.S
-$(OUTPUT_DIR)/Mbr.o: $(MODULE_DIR)/Mbr.S
-	$(ASM) -c -o $(OUTPUT_DIR)/Mbr.o $(MODULE_DIR)/Mbr.S
-$(OUTPUT_DIR)/Mbr.com: $(OUTPUT_DIR)/Mbr.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/Mbr.com $(OUTPUT_DIR)/Mbr.o -Ttext 0 -Map $(OUTPUT_DIR)/Mbr.map
-
-# start.S
-$(OUTPUT_DIR)/start.o: $(MODULE_DIR)/start.S
-	$(ASM) -c -o $(OUTPUT_DIR)/start.o $(MODULE_DIR)/start.S
-$(OUTPUT_DIR)/start.com: $(OUTPUT_DIR)/start.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/start.com $(OUTPUT_DIR)/start.o -Ttext 0 -Map $(OUTPUT_DIR)/start.map
-
-# start16.S
-$(OUTPUT_DIR)/start16.o: $(MODULE_DIR)/start16.S
-	$(ASM) -c -o $(OUTPUT_DIR)/start16.o $(MODULE_DIR)/start16.S
-$(OUTPUT_DIR)/start16.com: $(OUTPUT_DIR)/start16.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/start16.com $(OUTPUT_DIR)/start16.o -Ttext 0 -Map $(OUTPUT_DIR)/start16.map
-
-# start32.S
-$(OUTPUT_DIR)/start32.o: $(MODULE_DIR)/start32.S
-	$(ASM) -c -o $(OUTPUT_DIR)/start32.o $(MODULE_DIR)/start32.S
-$(OUTPUT_DIR)/start32.com: $(OUTPUT_DIR)/start32.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/start32.com $(OUTPUT_DIR)/start32.o -Ttext 0 -Map $(OUTPUT_DIR)/start32.map
-
-# start64.S
-$(OUTPUT_DIR)/start64.o: $(MODULE_DIR)/start64.S
-	$(ASM) -c -o $(OUTPUT_DIR)/start64.o $(MODULE_DIR)/start64.S
-$(OUTPUT_DIR)/start64.com: $(OUTPUT_DIR)/start64.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/start64.com $(OUTPUT_DIR)/start64.o -Ttext 0 -Map $(OUTPUT_DIR)/start64.map
-
-# start16_64.S
-$(OUTPUT_DIR)/st16_64.o: $(MODULE_DIR)/st16_64.S
-	$(ASM) -c -o $(OUTPUT_DIR)/st16_64.o $(MODULE_DIR)/st16_64.S
-$(OUTPUT_DIR)/st16_64.com: $(OUTPUT_DIR)/st16_64.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/st16_64.com $(OUTPUT_DIR)/st16_64.o -Ttext 0 -Map $(OUTPUT_DIR)/st16_64.map
-
-# start32_64.S
-$(OUTPUT_DIR)/st32_64.o: $(MODULE_DIR)/st32_64.S
-	$(ASM) -c -o $(OUTPUT_DIR)/st32_64.o $(MODULE_DIR)/st32_64.S
-$(OUTPUT_DIR)/st32_64.com: $(OUTPUT_DIR)/st32_64.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/st32_64.com $(OUTPUT_DIR)/st32_64.o -Ttext 0 -Map $(OUTPUT_DIR)/st32_64.map
-
-# efi32.S
-$(OUTPUT_DIR)/efi32.o: $(MODULE_DIR)/efi32.S
-	$(ASM) -c -o $(OUTPUT_DIR)/efi32.o $(MODULE_DIR)/efi32.S
-$(OUTPUT_DIR)/efi32.com: $(OUTPUT_DIR)/efi32.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/efi32.com $(OUTPUT_DIR)/efi32.o -Ttext 0 -Map $(OUTPUT_DIR)/efi32.map
-$(OUTPUT_DIR)/efi32.com2: $(OUTPUT_DIR)/efi32.com
-	Split -f $(OUTPUT_DIR)/efi32.com -p $(OUTPUT_DIR) -o efi32.com1 -p $(OUTPUT_DIR) -t efi32.com2 -s 135168
-
-# efi64.S
-$(OUTPUT_DIR)/efi64.o: $(MODULE_DIR)/efi64.S
-	$(ASM) -c -o $(OUTPUT_DIR)/efi64.o $(MODULE_DIR)/efi64.S
-$(OUTPUT_DIR)/efi64.com: $(OUTPUT_DIR)/efi64.o
-	$(DLINK) --oformat binary -o $(OUTPUT_DIR)/efi64.com $(OUTPUT_DIR)/efi64.o -Ttext 0 -Map $(OUTPUT_DIR)/efi64.map
-$(OUTPUT_DIR)/efi64.com2: $(OUTPUT_DIR)/efi64.com
-	Split -f $(OUTPUT_DIR)/efi64.com -p $(OUTPUT_DIR) -o efi64.com1 -p $(OUTPUT_DIR) -t efi64.com2 -s 135168
-
-clean:
-ifneq ($(OUTPUT_DIR), )
+.PHONY : all
+all: $(TARGET_FILES)
+
+$(OUTPUT_DIR)/bootsect.com: $(MODULE_DIR)/bootsect.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/bootsect.com $(MODULE_DIR)/bootsect.asm
+
+$(OUTPUT_DIR)/bs16.com: $(MODULE_DIR)/bs16.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/bs16.com $(MODULE_DIR)/bs16.asm
+
+$(OUTPUT_DIR)/bs32.com: $(MODULE_DIR)/bs32.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/bs32.com $(MODULE_DIR)/bs32.asm
+
+$(OUTPUT_DIR)/Gpt.com: $(MODULE_DIR)/Gpt.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/Gpt.com $(MODULE_DIR)/Gpt.asm
+
+$(OUTPUT_DIR)/Mbr.com: $(MODULE_DIR)/Mbr.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/Mbr.com $(MODULE_DIR)/Mbr.asm
+
+$(OUTPUT_DIR)/start.com: $(MODULE_DIR)/start.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/start.com $(MODULE_DIR)/start.asm
+
+$(OUTPUT_DIR)/start16.com: $(MODULE_DIR)/start16.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/start16.com $(MODULE_DIR)/start16.asm
+
+$(OUTPUT_DIR)/start32.com: $(MODULE_DIR)/start32.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/start32.com $(MODULE_DIR)/start32.asm
+
+$(OUTPUT_DIR)/start64.com: $(MODULE_DIR)/start64.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/start64.com $(MODULE_DIR)/start64.asm
+
+$(OUTPUT_DIR)/st16_64.com: $(MODULE_DIR)/st16_64.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/st16_64.com $(MODULE_DIR)/st16_64.asm
+
+$(OUTPUT_DIR)/st32_64.com: $(MODULE_DIR)/st32_64.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/st32_64.com $(MODULE_DIR)/st32_64.asm
+
+$(OUTPUT_DIR)/efi32.com2: $(MODULE_DIR)/efi32.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/efi32.com2 $(MODULE_DIR)/efi32.asm
+
+$(OUTPUT_DIR)/efi64.com2: $(MODULE_DIR)/efi64.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/efi64.com2 $(MODULE_DIR)/efi64.asm
+
+clean:
+ifneq ($(OUTPUT_DIR), )
 	rm -r $(OUTPUT_DIR)
 endif
 ifneq ($(DEBUG_DIR), )
Index: DuetPkg/BootSector/Makefile
===================================================================
--- DuetPkg/BootSector/Makefile	(revision 1)
+++ DuetPkg/BootSector/Makefile	(working copy)
@@ -12,20 +12,28 @@
 #
 ##
 
-BASETOOLS_DIR = $(EDK_TOOLS_PATH)\Bin\Win32
+PP_DEFS = $(PP_DEFS) /DIMAGE_BUFFER_LOW=$(IMAGE_BUFFER_LOW)
+PP_DEFS = $(PP_DEFS) /DIMAGE_BUFFER_HIGH=$(IMAGE_BUFFER_HIGH)
+PP_DEFS = $(PP_DEFS) /DX64_PAGE_TABLE_BASE=$(X64_PAGE_TABLE_BASE)
+PP_DEFS = $(PP_DEFS) /DSTART64CODESIZE=$(START64CODESIZE)
+PP_DEFS = $(PP_DEFS) /DEFI64CODESTART=$(EFI64CODESTART)
+PP_DEFS = $(PP_DEFS) /DEFI64CODESIZE=$(EFI64CODESIZE)
+PP_DEFS = $(PP_DEFS) /DX64_STACK_TOP=$(X64_STACK_TOP)
+ASM = $(EDK_TOOLS_PATH)\Bin\Win32\JWASM -bin $(PP_DEFS)
 
-#
-# Build Macro
-#
 ASSEMBLY_CODE_FILE_LIST = $(MODULE_DIR)\bootsect.asm \
                           $(MODULE_DIR)\bs16.asm \
                           $(MODULE_DIR)\bs32.asm \
                           $(MODULE_DIR)\efi32.asm \
+                          $(MODULE_DIR)\efi64.asm \
                           $(MODULE_DIR)\Gpt.asm \
                           $(MODULE_DIR)\Mbr.asm \
                           $(MODULE_DIR)\start.asm \
                           $(MODULE_DIR)\start16.asm \
-                          $(MODULE_DIR)\start32.asm 
+                          $(MODULE_DIR)\start32.asm \
+                          $(MODULE_DIR)\start64.asm \
+                          $(MODULE_DIR)\st16_64.asm \
+                          $(MODULE_DIR)\st32_64.asm
 
 TARGET_FILES = $(OUTPUT_DIR)\bootsect.com \
                $(OUTPUT_DIR)\bs16.com \
@@ -35,11 +43,11 @@
                $(OUTPUT_DIR)\Start.com \
                $(OUTPUT_DIR)\Start16.com \
                $(OUTPUT_DIR)\Start32.com \
-               $(OUTPUT_DIR)\Start64.com \
-               $(OUTPUT_DIR)\St16_64.com \
-               $(OUTPUT_DIR)\St32_64.com \
                $(OUTPUT_DIR)\efi32.com2 \
-               $(OUTPUT_DIR)\efi64.com2 
+               $(OUTPUT_DIR)\start64.com \
+               $(OUTPUT_DIR)\st16_64.com \
+               $(OUTPUT_DIR)\st32_64.com \
+               $(OUTPUT_DIR)\efi64.com2
 
 INC = 
       
@@ -52,120 +60,46 @@
 
 all: $(TARGET_FILES)
           
-#=============                
-$(OUTPUT_DIR)\bootsect.obj:$(MODULE_DIR)\bootsect.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\bootsect.obj" /FR"$(OUTPUT_DIR)\bootsect.txt" "$(MODULE_DIR)\bootsect.asm"
-             
-$(OUTPUT_DIR)\bootsect.com:$(OUTPUT_DIR)\bootsect.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\bootsect.obj,$(OUTPUT_DIR)\bootsect.com,$(OUTPUT_DIR)\bootsect.map,,,
+                
+$(OUTPUT_DIR)/bootsect.com: $(MODULE_DIR)/bootsect.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/bootsect.com $(MODULE_DIR)/bootsect.asm
 
-#=============                
+$(OUTPUT_DIR)/bs16.com: $(MODULE_DIR)/bs16.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/bs16.com $(MODULE_DIR)/bs16.asm
 
-$(OUTPUT_DIR)\bs16.obj:$(MODULE_DIR)\bs16.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\bs16.obj" "$(MODULE_DIR)\bs16.asm"
-             
-$(OUTPUT_DIR)\bs16.com:$(OUTPUT_DIR)\bs16.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\bs16.obj,$(OUTPUT_DIR)\bs16.com,$(OUTPUT_DIR)\bs16.map,,,
+$(OUTPUT_DIR)/bs32.com: $(MODULE_DIR)/bs32.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/bs32.com $(MODULE_DIR)/bs32.asm
 
-#=============                
+$(OUTPUT_DIR)/Gpt.com: $(MODULE_DIR)/Gpt.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/Gpt.com $(MODULE_DIR)/Gpt.asm
 
-$(OUTPUT_DIR)\bs32.obj:$(MODULE_DIR)\bs32.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\bs32.obj" "$(MODULE_DIR)\bs32.asm"
-             
-$(OUTPUT_DIR)\bs32.com:$(OUTPUT_DIR)\bs32.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\bs32.obj,$(OUTPUT_DIR)\bs32.com,$(OUTPUT_DIR)\bs32.map,,,
+$(OUTPUT_DIR)/Mbr.com: $(MODULE_DIR)/Mbr.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/Mbr.com $(MODULE_DIR)/Mbr.asm
 
-#=============                
+$(OUTPUT_DIR)/start.com: $(MODULE_DIR)/start.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/start.com $(MODULE_DIR)/start.asm
 
-$(OUTPUT_DIR)\Gpt.obj:$(MODULE_DIR)\Gpt.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\Gpt.obj" "$(MODULE_DIR)\Gpt.asm"
-             
-$(OUTPUT_DIR)\Gpt.com:$(OUTPUT_DIR)\Gpt.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\Gpt.obj,$(OUTPUT_DIR)\Gpt.com,$(OUTPUT_DIR)\Gpt.map,,,
+$(OUTPUT_DIR)/start16.com: $(MODULE_DIR)/start16.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/start16.com $(MODULE_DIR)/start16.asm
 
-#=============                
+$(OUTPUT_DIR)/start32.com: $(MODULE_DIR)/start32.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/start32.com $(MODULE_DIR)/start32.asm
 
-$(OUTPUT_DIR)\Mbr.obj:$(MODULE_DIR)\Mbr.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\Mbr.obj" "$(MODULE_DIR)\Mbr.asm"
-             
-$(OUTPUT_DIR)\Mbr.com:$(OUTPUT_DIR)\Mbr.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\Mbr.obj,$(OUTPUT_DIR)\Mbr.com,$(OUTPUT_DIR)\Mbr.map,,,
+$(OUTPUT_DIR)/start64.com: $(MODULE_DIR)/start64.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/start64.com $(MODULE_DIR)/start64.asm
 
-#============
+$(OUTPUT_DIR)/st16_64.com: $(MODULE_DIR)/st16_64.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/st16_64.com $(MODULE_DIR)/st16_64.asm
 
-$(OUTPUT_DIR)\Start.obj:$(MODULE_DIR)\Start.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\Start.obj" "$(MODULE_DIR)\Start.asm"
-             
-$(OUTPUT_DIR)\Start.com:$(OUTPUT_DIR)\Start.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\Start.obj,$(OUTPUT_DIR)\Start.com,$(OUTPUT_DIR)\Start.map,,,
-  
-#=============     
+$(OUTPUT_DIR)/st32_64.com: $(MODULE_DIR)/st32_64.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/st32_64.com $(MODULE_DIR)/st32_64.asm
 
-$(OUTPUT_DIR)\Start16.obj:$(MODULE_DIR)\Start16.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\Start16.obj" "$(MODULE_DIR)\Start16.asm"
-             
-$(OUTPUT_DIR)\Start16.com:$(OUTPUT_DIR)\Start16.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\Start16.obj,$(OUTPUT_DIR)\Start16.com,$(OUTPUT_DIR)\Start16.map,,,
+$(OUTPUT_DIR)/efi32.com2: $(MODULE_DIR)/efi32.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/efi32.com2 $(MODULE_DIR)/efi32.asm
 
-#=============
+$(OUTPUT_DIR)/efi64.com2: $(MODULE_DIR)/efi64.asm
+	$(ASM) -c -Fo=$(OUTPUT_DIR)/efi64.com2 $(MODULE_DIR)/efi64.asm
 
-$(OUTPUT_DIR)\Start32.obj:$(MODULE_DIR)\Start32.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\Start32.obj" "$(MODULE_DIR)\Start32.asm"
-             
-$(OUTPUT_DIR)\Start32.com:$(OUTPUT_DIR)\Start32.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\Start32.obj,$(OUTPUT_DIR)\Start32.com,$(OUTPUT_DIR)\Start32.map,,,
-
-#=============
-
-$(OUTPUT_DIR)\Start64.obj:$(MODULE_DIR)\Start64.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\Start64.obj" "$(MODULE_DIR)\Start64.asm"
-             
-$(OUTPUT_DIR)\Start64.com:$(OUTPUT_DIR)\Start64.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\Start64.obj,$(OUTPUT_DIR)\Start64.com,$(OUTPUT_DIR)\Start64.map,,,
-
-#=============
-
-$(OUTPUT_DIR)\St16_64.obj:$(MODULE_DIR)\St16_64.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\St16_64.obj" "$(MODULE_DIR)\St16_64.asm"
-             
-$(OUTPUT_DIR)\St16_64.com:$(OUTPUT_DIR)\St16_64.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\St16_64.obj,$(OUTPUT_DIR)\St16_64.com,$(OUTPUT_DIR)\St16_64.map,,,
-
-#=============
-
-$(OUTPUT_DIR)\St32_64.obj:$(MODULE_DIR)\St32_64.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\St32_64.obj" "$(MODULE_DIR)\St32_64.asm"
-             
-$(OUTPUT_DIR)\St32_64.com:$(OUTPUT_DIR)\St32_64.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\St32_64.obj,$(OUTPUT_DIR)\St32_64.com,$(OUTPUT_DIR)\St32_64.map,,,
-
-#=============
-
-$(OUTPUT_DIR)\efi32.obj:$(MODULE_DIR)\efi32.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\efi32.obj" "$(MODULE_DIR)\efi32.asm"
-             
-$(OUTPUT_DIR)\efi32.com:$(OUTPUT_DIR)\efi32.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\efi32.obj,$(OUTPUT_DIR)\efi32.com,$(OUTPUT_DIR)\efi32.map,,,
-
-#=============
-
-$(OUTPUT_DIR)\efi32.com2:$(OUTPUT_DIR)\efi32.com
-	$(BASETOOLS_DIR)\Split.exe -f $(OUTPUT_DIR)\efi32.com -t $(OUTPUT_DIR)\efi32.com2 -s 135168
-
-#=============
-
-$(OUTPUT_DIR)\efi64.obj:$(MODULE_DIR)\efi64.asm
-	"$(ASM)" /c /omf /Fo"$(OUTPUT_DIR)\efi64.obj" "$(MODULE_DIR)\efi64.asm"
-             
-$(OUTPUT_DIR)\efi64.com:$(OUTPUT_DIR)\efi64.obj
-	"$(ASMLINK)" /tiny $(OUTPUT_DIR)\efi64.obj,$(OUTPUT_DIR)\efi64.com,$(OUTPUT_DIR)\efi64.map,,,
-
-#=============
-
-$(OUTPUT_DIR)\efi64.com2:$(OUTPUT_DIR)\efi64.com
-	$(BASETOOLS_DIR)\Split.exe -f $(OUTPUT_DIR)\efi64.com -t $(OUTPUT_DIR)\efi64.com2 -s 135168
-
-    
 clean:
 	if exist $(DEBUG_DIR) rmdir /s /q $(DEBUG_DIR)
 	if exist $(OUTPUT_DIR) rmdir /s /q $(OUTPUT_DIR)
Index: DuetPkg/DuetPkgX64.dsc
===================================================================
--- DuetPkg/DuetPkgX64.dsc	(revision 1)
+++ DuetPkg/DuetPkgX64.dsc	(working copy)
@@ -259,6 +259,8 @@
   #
   MdeModulePkg/Application/HelloWorld/HelloWorld.inf
 
+  DuetPkg/BootSector/BootSector.inf
+
 ###################################################################################################
 #
 # BuildOptions Section - Define the module specific tool chain flags that should be used as
