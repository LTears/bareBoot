;------------------------------------------------------------------------------
;*
;*   Copyright (c) 2006 - 2016, Intel Corporation. All rights reserved.<BR>
;*   Copyright (c) 2016, Nikolai Saoukh. All rights reserved.<BR>
;*
;*   This program and the accompanying materials
;*   are licensed and made available under the terms and conditions of the BSD License
;*   which accompanies this distribution.  The full text of the license may be found at
;*   http://opensource.org/licenses/bsd-license.php
;*
;*   THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
;*   WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
;*
;*    EfiLdrPrelude.nasm
;*
;------------------------------------------------------------------------------
; nms was here, enlightened by Scott Duplichan (notabs.org) works ;-)
;------------------------------------------------------------------------------
; Variants selected by nasm command line
;  -DX64=?
;------------------------------------------------------------------------------

%include "bootxdefs.nasm"
%include "efifvfile.nasm"
%include "efiimage.nasm"

%if X64
%ifndef	X64_PAGE_TABLE_BASE
%define	X64_PAGE_TABLE_BASE	0x8000
%endif
%endif	; X64

struc	idtdescr
	.loffset	resw	1	; offset low bits (0..15)
	.selector	resw	1	; code segment selector
	.zero1		resb	1	; zero
	.tattr		resb	1	; type and attributes
	.moffset	resw	1	; offset middle bits (16..31)
%if X64
	.hoffset	resd	1	; offset high bits (32..63)
	.zero2		resd	1	; zero
%endif	; X64
endstruc

IDT_COUNT	equ	((IDT_END - IDT_BASE) / idtdescr_size)

PAYLOAD_STACK	equ	(2 * 1024 * 1024 - 0x18)

;------------------------------------------------------------------------------

	BITS	16

Start0:
	mov	ax, cs
	mov	ds, ax
	mov	es, ax
	mov	ss, ax
	mov	sp, 0xFFF0	; XXX: better place?

;------------------------------------------------------------------------------
; Where we are? ;-)

	call	readEip16
	sub	ax, ($ - Start0)
	xor	ebp, ebp
	mov	bp, cs
	shr	ax, 4
	add	bp, ax
	mov	es, bp	; our code&data base segment
	shl	ebp, 4	; our code&data linear address

;------------------------------------------------------------------------------
; Gether memory map

getBiosMemoryMap:
	xor	ebx, ebx
	mov	edi, BiosMemoryMap + 4	; skip map size

.1:
	mov	eax, 0xE820
	mov	ecx, 20
	mov	edx, 'PAMS'
	int	0x15
	jc	.2
	add	edi, 20
	cmp	ebx, 0
	je	.2
	jmp	.1

.2:
	mov	eax, BiosMemoryMap + 4
	sub	edi, eax
	mov	dword [es:BiosMemoryMap], edi

;------------------------------------------------------------------------------
; Fix pointers & offsets

fixPointers:
	lea	eax, [ebp + GDT_BASE]		; PHYSICAL address of gdt
	mov	dword [es:gdtr + 2], eax
	lea	eax, [ebp + IDT_BASE]		; PHYSICAL address of idt
	mov	dword [es:idtr + 2], eax

	lea	eax, [ebp + In32BitProtectedMode]
	mov	dword [es:OffsetIn32BitProtectedMode], eax

%if X64
	lea	eax, [ebp + InLongMode]
	mov	dword [es:OffsetInLongMode], eax
%endif	; X64

;------------------------------------------------------------------------------
; Populate IDT with meaningful offsets for exception handlers...

	mov	di, IDT_BASE
	lea	eax, [ebp + Halt]
	mov	ebx, eax	; use bx to copy 15..0 to descriptors
	shr	eax, 16		; use ax to copy 31..16 to descriptors
	mov	cx, IDT_COUNT	; count of IDT entries to initialize

.1:
	mov	word [es:di + idtdescr.loffset], bx	; write bits 15..0 of offset
	mov	word [es:di + idtdescr.moffset], ax	; write bits 31..16 of offset
							; X64: 63..32 of descriptors are 0
	add	di, idtdescr_size			; move up to next descriptor
	add	bx, DEFAULT_HANDLER_SIZE		; move to next entry point
	loop	.1

%if X64
;------------------------------------------------------------------------------
; Prepare paging tables

	BITS	16

mappingSize	equ	0xFFFFFFFF

count4		equ	((mappingSize >> 39) + 1)
count3		equ	((mappingSize >> 30) + 1)
count2		equ	((mappingSize >> 21) + 1)

struc	pageMapLevel4	
.lowPart	resd	1
.highPart	resd	1
endstruc

struc	pageDirectoryPointer
.lowPart	resd	1
.highPart	resd	1
endstruc

struc	pageDirectory
.lowPart	resd	1
.highPart	resd	1
endstruc

struc	tableStruct
.map		resb	(pageMapLevel4_size * count4)
		align	4096, resb 1
.pointer	resb	(pageDirectoryPointer_size * count3)
		align	4096, resb 1
.directory	resb	(pageDirectory_size * count2)
endstruc

identityMapLongMode:
	push	ds
	push	es

	mov	ax, X64_PAGE_TABLE_BASE / 16
	mov	ds, ax
	mov	es, ax
	movzx	ebx, ax
	shl	ebx, 4	; ebx = table base physical address

	mov	cx, tableStruct_size
	xor	di, di	; table starts at beginning of segment
	xor	al, al	
	rep	stosb	; clear the page table memory

	xor	ecx, ecx
	mov	di, 0
.1:
	lea	eax, [ebx + tableStruct.pointer]
	add	eax, ecx
	or	al, 0x03	; present, writable
	or	[di + tableStruct.map + pageMapLevel4.lowPart], eax
	add	di, pageMapLevel4_size
	add	ecx, 4096
	cmp	ecx, (count4 << 12)
	jl	.1

	xor	ecx, ecx
	mov	di, 0
.2:
	lea	eax, [ebx + tableStruct.directory]
	add	eax, ecx
	or	al, 0x03	; present, writable
	or	[di + tableStruct.pointer + pageDirectoryPointer.lowPart], eax
	add	di, pageDirectoryPointer_size
	add	ecx, 4096
	cmp	ecx, (count3 << 12)
	jl	.2

	xor	ecx, ecx
	mov	di, 0
.3:
	mov	eax, ecx
	shl	eax, 21
	or	al, 0x83	; present, writable, big
	or	[di + tableStruct.directory + pageDirectory.lowPart], eax
	add	di, pageDirectory_size
	inc	ecx
	cmp	ecx, count2
	jl	.3

	pop	es
	pop	ds
%endif	; X64

;------------------------------------------------------------------------------
; Entering Protected Mode

	cli
	o32 lgdt	[es:gdtr]

	mov	eax, cr0
	or	eax, 1		; Enable Protect Mode (set CR0.PE=1)
	mov	cr0, eax

	jmp	dword LINEAR_CODE_SEL:In32BitProtectedMode	; XXX: will be adjusted by above code
OffsetIn32BitProtectedMode	equ ($ - 6)

;------------------------------------------------------------------------------

In32BitProtectedMode:

	BITS	32

	mov	ax, LINEAR_SEL
	mov	ds, ax
	mov	es, ax
	mov	ss, ax

	mov	esp, PAYLOAD_STACK

;------------------------------------------------------------------------------
; Move EfiLdr to its final destination

moveEfiLdr:
	lea	esi, [ebp + PayloadDatum]

	push	ebp
	mov	eax, [esi + EfiLdrHeader_size + EfiLdrImage.Offset]
	add	esi, eax			; esi = Base of EFILDR datum
	mov	ebp, [esi + MsDosStub.e_lfanew]	; ebp = PE Image Header for EFILDR
	add	ebp, esi
%if X64
	mov	edi, [ebp + PeHeader_size + Pe64OptionalHeader.ImageBase]
	mov	eax, [ebp + PeHeader_size + Pe64OptionalHeader.AddressOfEntryPoint]
%else	; IA32
	mov	edi, [ebp + PeHeader_size + Pe32OptionalHeader.ImageBase]
	mov	eax, [ebp + PeHeader_size + Pe32OptionalHeader.AddressOfEntryPoint]
%endif	; IA32
	add	eax, edi			; eax = ImageBase + EntryPoint

	push	eax

	movzx	ebx, word [ebp + PeHeader.NumberOfSections]
	movzx	eax, word [ebp + PeHeader.SizeOfOptionalHeader]
	add	ebp, eax
	add	ebp, PeHeader_size	; ebp = Start of 1st Section

SectionLoop:
	push	esi	; Save Base of EFILDR
	push	edi	; Save ImageBase

	add	esi, [ebp + PeSectionHeader.PointerToRawData]	; esi = ImageBase + PointerToRawData
	add	edi, [ebp + PeSectionHeader.VirtualAddress]	; edi = ImageBase + VirtualAddress
	mov	ecx, [ebp + PeSectionHeader.SizeOfRawData]	; ecs = SizeOfRawData

	cld
	shr	ecx, 2
	rep	movsd

	pop	edi	; Restore ImageBase
	pop	esi	; Restore Base of EFILDR

	add	ebp, PeSectionHeader_size	; ebp = Pointer to next section record
	dec	ebx
	cmp	ebx, 0
	jne	SectionLoop

	pop	esi	; Payload entry point
	pop	ebp	; Our code&data real address

%if X64
;------------------------------------------------------------------------------
; Entering Long Mode

	mov	ax, LINEAR_SEL
	mov	ds, ax
	mov	es, ax
	mov	ss, ax

	;
	; Enable the 64-bit page-translation-table entries by
	; setting CR4.PAE=1 (this is _required_ before activating
	; long mode). Paging is not enabled until after long mode
	; is enabled.

	mov	eax, cr4
	bts	eax, 5
	mov	cr4, eax

	; This is the Trampoline Page Tables that are guaranted
	; under 4GB.
	;
	; Address Map:
	;  10000 ~ 12000 - efildr (loaded)
	;  20000 ~ 21000 - efildrprelude

	mov	eax, X64_PAGE_TABLE_BASE
	mov	cr3, eax

	mov	ecx, 0xC0000080	; EFER MSR number.
	rdmsr
	bts	eax, 8		; Enable long mode (set EFER.LME=1).
	wrmsr

	mov	eax, cr0
	bts	eax, 31		; Enable paging to activate long mode (set CR0.PG=1)
	mov	cr0, eax

	a16 jmp	dword SYS_CODE64_SEL:InLongMode	; XXX: will be adjusted by above code
OffsetInLongMode	equ ($ - 6)

;------------------------------------------------------------------------------

InLongMode:

	BITS	64

	mov	ax, SYS_DATA64_SEL
	mov	ds, ax

	mov	ax, SYS_DATA_SEL
	mov	es, ax
	mov	ss, ax
	mov	ds, ax

;------------------------------------------------------------------------------
; set OSFXSR and OSXMMEXCPT because some code will use XMM register

	mov rax, cr4
	bts rax, 9
	bts rax, 10
	mov cr4, rax

	lidt	[rbp + idtr]

;------------------------------------------------------------------------------
; Go to X64 payload code

	; XXX: args in rcx, rdx, r8, r9

	mov	rdx, (kPayloadHighAddr + (PayloadDatum - Start0))
	lea	rcx, [rbp + BiosMemoryMap]
	call	rsi

%else	; IA32

	BITS 32

	lidt	[ebp + idtr]

;------------------------------------------------------------------------------
; Go to IA32 payload code

	; XXX: args on stack
	push	dword (kPayloadHighAddr + (PayloadDatum - Start0))
	lea	eax, [ebp + BiosMemoryMap]
	push	eax
	call	esi

%endif	; IA32

;------------------------------------------------------------------------------

	BITS	16

readEip16:
	mov	eax, [esp]
	ret

;------------------------------------------------------------------------------
; Interrupt Handling Table

%macro	ihtentry	1
	push	0
	push	%1
	jmp	qword commonIhtEntry	; qword to keep the same entry length
%endmacro

%macro	ihtenerr	1
	nop
	nop
	push	%1
	jmp	qword commonIhtEntry	; qword to keep the same entry length
%endmacro

	align	2

	BITS	64

DEFAULT_HANDLER_SIZE equ (INT1 - INT0)

Halt:
INT0:
	ihtentry	0

INT1:
	ihtentry	1
	ihtentry	2
	ihtentry	3
	ihtentry	4
	ihtentry	5
	ihtentry	6
	ihtentry	7
	ihtenerr	8	; Double Fault
	ihtentry	9
	ihtenerr	10	; Invalid TSS
	ihtenerr	11	; Segment Not Present
	ihtenerr	12	; Stack Fault
	ihtenerr	13	; GP Fault
	ihtenerr	14	; Page Fault
	ihtentry	15
	ihtentry	16
	ihtenerr	17	; Alignment Check
	ihtentry	18
	ihtentry	19

INTUnknown:
; XXX: 0x78 is IDT_COUNT, 9 is DEFAULT_HANDLER_SIZE. Keep in sync!
%rep	(0x78 - 20)
	ihtentry	(($ - INTUnknown - 2) / 9 + 20)
%endrep

;------------------------------------------------------------------------------

%if X64
%define	ZWORD_SIZE	8
%define	Zax	rax
%define	Zbx	rbx
%define	Zcx	rcx
%define	Zdi	rdi
%define	Zsi	rsi
%else	; IA32
%define	ZWORD_SIZE	4
%define	Zax	eax
%define	Zbx	ebx
%define	Zcx	ecx
%define	Zdi	edi
%define	Zsi	esi
%endif	; IA32

;------------------------------------------------------------------------------
; Interrupt Handler

commonIhtEntry:
%if X64

	BITS 64

	push	rax
	push	rcx
	push	rdx
	push	rbx
	push	rsp
	push	rbp
	push	rsi
	push	rdi
	push	r8
	push	r9
	push	r10
	push	r11
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp

;; At this point the stack looks like this:
;;
;;  Calling SS
;;  Calling RSP
;;  rflags
;;  Calling CS
;;  Calling RIP
;;  Error code or 0
;;  Int num or 0xFF for unknown int num
;;  rax
;;  rcx
;;  rdx
;;  rbx
;;  rsp
;;  rbp
;;  rsi
;;  rdi
;;  r8
;;  r9
;;  r10
;;  r11
;;  r12
;;  r13
;;  r14
;;  r15 <------- RSP, RBP

%macro PrintRegister 2
	lea	rsi, [rbx + %1]
	call	PrintString
	mov	rax, [rbp + %2 * 8]
	call	PrintZword
%endmacro

	call	readRip64
	sub	rax, ($ - Start0)
	mov	rbx, rax

	call	ClearScreen

	lea	rsi, [rbx + String1]
	call	PrintString
	mov	rax, [rbp + 16 * 8]	; move Int number into RAX
	cmp	rax, 19
	ja	PrintDefaultString

PrintExceptionString:
	shl	rax, 2			; multiply by 4 (sizeof dword) to get from StringTable to actual string address
	add	rax, rbx
	mov	esi, dword [rax + StringTable]
	add	rsi, rbx
	jmp	PrintTheString

PrintDefaultString:
	lea	rsi, [rbx + IntUnkString]
	mov	rdx, rax		; patch Int number
	call	A2C
	mov	[rsi + 1], al
	mov	rax, rdx
	shr	rax, 4
	call	A2C
	mov	[rsi], al

PrintTheString:
	call	PrintString

	PrintRegister String2, 19	; CS

	mov	byte [rdi], ':'
	add	rdi, 2
	mov	rax, [rbp + 18 * 8]	; RIP
	call	PrintZword
	lea	rsi, [rbx + String3]
	call	PrintString

	mov	rdi, 0x000B8140

	PrintRegister StringRax, 15
	PrintRegister StringRcx, 14
	PrintRegister StringRdx, 13

	mov	rdi, 0x000B81E0

	PrintRegister StringRbx, 12
	PrintRegister StringRsp, 21
	PrintRegister StringRbp, 10

	mov	rdi, 0x000B8280

	PrintRegister StringRsi, 9
	PrintRegister StringRdi, 8
	PrintRegister StringEcode, 17

	mov	rdi, 0x000B8320

	PrintRegister StringR8, 7
	PrintRegister StringR9, 6
	PrintRegister StringR10, 5

	mov	rdi, 0x000B83C0

	PrintRegister StringR11, 4
	PrintRegister StringR12, 3
	PrintRegister StringR13, 2

	mov	rdi, 0x000B8460

	PrintRegister StringR14, 1
	PrintRegister StringR15, 0
	PrintRegister StringSs, 22

	mov	rdi, 0x000B8500

	PrintRegister StringRflags, 20

	mov	rdi, 0x000B8640

	mov	rsi, rbp
	add	rsi, 23 * 8
	mov	rcx, 4

OuterLoop:
	push	rcx
	mov	rcx, 4
	mov	rdx, rdi

InnerLoop:
	mov	rax, [rsi]
	call	PrintZword
	add	rsi, 8
	mov	byte [rdi], ' '
	add	rdi, 2
	loop	InnerLoop

	pop	rcx
	add	rdx, 160
	mov	rdi, rdx
	loop	OuterLoop

	mov	rdi, 0x000B8960

	mov	rax, [rbp + 18 * 8]	; RIP
	sub	rax, 8 * 8
	mov	rsi, rax		; rsi = rip - 8 QWORD linear (total 16 QWORD)

	mov	rcx, 4

OuterLoop1:
	push	rcx
	mov	rcx, 4
	mov	rdx, rdi

InnerLoop1:
	mov	rax, [rsi]
	call	PrintZword
	add	rsi, 8
	mov	byte [rdi], ' '
	add	rdi, 2
	loop	InnerLoop1

	pop	rcx
	add	rdx, 160
	mov	rdi, rdx
	loop	OuterLoop1

@2:
	jmp	@2

	; return
	mov	rsp, rbp
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	r11
	pop	r10
	pop	r9
	pop	r8
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rax	; esp
	pop	rbx
	pop	rdx
	pop	rcx
	pop	rax

	add	rsp, 16	; error code and INT number
	iretq

readRip64:
	mov	rax, [rsp]
	ret
%else	; IA32

	BITS	32

	pushad
	mov	ebp, esp
;;
;;	At this point the stack looks like this:
;;
;;	eflags
;;	Calling CS
;;	Calling EIP
;;	Error code or 0
;;	Int num or 0ffh for unknown int num
;;	eax
;;	ecx
;;	edx
;;	ebx
;;	esp
;;	ebp
;;	esi
;;	edi <------- ESP, EBP
;;

%macro PrintRegister 2
	lea	esi, [ebx + %1]
	call	PrintString
	mov	eax, [ebp + %2]
	call	PrintZword
%endmacro

	call	readEip32
	sub	eax, ($ - Start0)
	mov	ebx, eax

	call	ClearScreen

	lea	esi, [ebx + String1]
	call	PrintString
	mov	eax, [ebp +  8 * 4]		; move Int number into EAX
	cmp	eax, 19
	ja	PrintDefaultString

PrintExceptionString:
	shl	eax, 2			; multiply by 4 to get offset from StringTable to actual string address
	add	eax, ebx
	mov	esi, [eax + StringTable]
	add	esi, ebx
	jmp	PrintTheString

PrintDefaultString:
	lea	esi, [ebx + IntUnkString]
	mov	edx, eax		; patch Int number
	call	A2C
	mov	[esi + 1], al
	mov	eax, edx
	shr	eax, 4
	call	A2C
	mov	[esi], al

PrintTheString:
	call	PrintString

	PrintRegister	String2, 44	; CS
	mov	byte [edi], ':'
	add	edi, 2
	mov	eax, [ebp + 40]		; EIP
	call	PrintZword
	lea	esi, [ebx + String3]
	call	PrintString

	mov	edi, 0x000B8140

	PrintRegister	StringEax, 28
	PrintRegister	StringEbx, 16
	PrintRegister	StringEcx, 24
	PrintRegister	StringEdx, 20
	PrintRegister	StringEcode, 36

	mov	edi, 0x000B81E0

	PrintRegister	StringEsp, 12
	PrintRegister	StringEbp, 8
	PrintRegister	StringEsi, 4
	PrintRegister	StringEdi, 0
	PrintRegister	StringEflags, 48

	mov	edi, 0x000B8320

	mov	esi, ebp
	add	esi, 52
	mov	ecx, 8

OuterLoop:
	push	ecx
	mov	ecx, 8
	mov	edx, edi

InnerLoop:
	mov	eax, [esi]
	call	PrintZword
	add	esi, 4
	mov	byte [edi], ' '
	add	edi, 2
	loop	InnerLoop

	pop	ecx
	add	edx, 160
	mov	edi, edx
	loop	OuterLoop

	mov	edi, 0x000B8960

	mov	eax, [ebp + 40]	; EIP
	sub	eax, 32 * 4
	mov	esi, eax	; esi = eip - 32 DWORD linear (total 64 DWORD)

	mov	ecx, 8

OuterLoop1:
	push	ecx
	mov	ecx, 8
	mov	edx, edi

InnerLoop1:
	mov	eax, [esi]
	call	PrintZword
	add	esi, 4
	mov	byte [edi], ' '
	add	edi, 2
	loop	InnerLoop1

	pop	ecx
	add	edx, 160
	mov	edi, edx
	loop	OuterLoop1

@2:
	jmp	@2

	mov	esp, ebp
	popad
	add	esp, 8	; error code and INT number

	iretd

readEip32:
	mov	eax, [esp]
	ret
%endif	; IA32

;------------------------------------------------------------------------------
;; ZAX contains zword to print
;; ZDI contains memory location (screen location) to print it to

PrintZword:
	push	Zcx
	push	Zbx
	push	Zax

	mov	Zcx, (2 * ZWORD_SIZE)

.1:
	rol	Zax, 4
	mov	bl, al
	and	bl, 0x0F
	add	bl, '0'
	cmp	bl, '9'
	jle	.2
	add	bl, 7

.2:
	mov	byte [Zdi], bl
	add	Zdi, 2
	loop	.1

	pop	Zax
	pop	Zbx
	pop	Zcx
	ret

;------------------------------------------------------------------------------

ClearScreen:
	push	Zax
	push	Zcx

	mov	al, ' '
	mov	ah, 0x0C
	mov	Zdi, 0x000B8000
	mov	Zcx, 80 * 24

.1:
	mov	word [Zdi], ax
	add	Zdi, 2
	loop	.1
	mov	Zdi, 0x000B8000

	pop	Zcx
	pop	Zax
	ret

;------------------------------------------------------------------------------

PrintString:
	push	Zax

.1:
	mov	al, byte [Zsi]
	cmp	al, 0
	je	.2
	mov	byte [Zdi], al
	inc	Zsi
	add	Zdi, 2
	jmp	.1

.2:
	pop	Zax
	ret

;------------------------------------------------------------------------------

A2C:
	and	al, 0x0F
	add	al, '0'
	cmp	al, '9'
	jle	.1
	add	al, 7

.1:
	ret

;------------------------------------------------------------------------------

IntUnkString	db	"??h Unknown interrupt -", 0

Int0String	db	"00h Divide by 0 -", 0
Int1String	db	"01h Debug exception -", 0
Int2String	db	"02h NMI -", 0
Int3String	db	"03h Breakpoint -", 0
Int4String	db	"04h Overflow -", 0
Int5String	db	"05h Bound -", 0
Int6String	db	"06h Invalid opcode -", 0
Int7String	db	"07h Device not available -", 0
Int8String	db	"08h Double fault -", 0
Int9String	db	"09h Coprocessor seg overrun (reserved) -", 0
Int10String	db	"0Ah Invalid TSS -", 0
Int11String	db	"0Bh Segment not present -", 0
Int12String	db	"0Ch Stack fault -", 0
Int13String	db	"0Dh General protection fault -", 0
Int14String	db	"0Eh Page fault -", 0
Int15String	db	"0Fh (Intel reserved) -", 0
Int16String	db	"10h Floating point error -", 0
Int17String	db	"11h Alignment check -", 0
Int18String	db	"12h Machine check -", 0
Int19String	db	"13h SIMD Floating-Point Exception -", 0

StringTable:
	dd	Int0String, Int1String, Int2String, Int3String
	dd	Int4String, Int5String, Int6String, Int7String
	dd	Int8String, Int9String, Int10String, Int11String
	dd	Int12String, Int13String, Int14String, Int15String
	dd	Int16String, Int17String, Int18String, Int19String

String1		db	"*** INT ", 0
String2		db	" HALT!! *** (", 0
String3		db	")", 0

StringEcode	db	" ECODE=", 0
%if X64
StringR10	db	" R10=", 0
StringR11	db	"R11=", 0
StringR12	db	" R12=", 0
StringR13	db	" R13=", 0
StringR14	db	"R14=", 0
StringR15	db	" R15=", 0
StringR8	db	"R8 =", 0
StringR9	db	" R9 =", 0
StringRax	db	"RAX=", 0
StringRbp	db	" RBP=", 0
StringRbx	db	"RBX=", 0
StringRcx	db	" RCX=", 0
StringRdi	db	" RDI=", 0
StringRdx	db	" RDX=", 0
StringRflags	db	"RFLAGS=", 0
StringRsi	db	"RSI=", 0
StringRsp	db	" RSP=", 0
StringSs	db	" SS =", 0
%else	; IA32
StringEax	db	"EAX=", 0
StringEbp	db	" EBP=", 0
StringEbx	db	" EBX=", 0
StringEcx	db	" ECX=", 0
StringEdi	db	" EDI=", 0
StringEdx	db	" EDX=", 0
StringEflags	db	" EFLAGS=", 0
StringEsi	db	" ESI=", 0
StringEsp	db	"ESP=", 0
%endif	; IA32

;------------------------------------------------------------------------------
; global descriptor table (GDT)
;------------------------------------------------------------------------------

%macro	gdtentry	4
%[%1]_SEL	equ	$ - GDT_BASE
	dw	%2	; limit low bits (0..15)
	dw	0	; base low bits (0..15)
	db	0	; base middle bits (16..23)
	db	%3	; access
	db	%4	; limit high bits (16..19) & flags
	db	0	; base high bits (24..31)
%endmacro

;------------------------------------------------------------------------------

	align 2

gdtr:
	dw	GDT_END - GDT_BASE - 1	; GDT limit
	dd	GDT_BASE		; will be adjusted at runtime

;------------------------------------------------------------------------------

	align 2

GDT_BASE:
	gdtentry	NULL, 0, 0, 0			; selector [0x00]
	gdtentry	LINEAR, 0xFFFF, 0x92, 0xCF	; selector [0x08]
	gdtentry	LINEAR_CODE, 0xFFFF, 0x9A, 0xCF	; selector [0x10]
	gdtentry	SYS_DATA, 0xFFFF, 0x92, 0xCF	; selector [0x18]
	gdtentry	SYS_CODE, 0xFFFF, 0x9A, 0xCF	; selector [0x20]
	gdtentry	SPARE3, 0, 0, 0			; selector [0x28]
	gdtentry	SYS_DATA64, 0xFFFF, 0x92, 0xCF	; selector [0x30]
	gdtentry	SYS_CODE64, 0xFFFF, 0x9A, 0xAF	; selector [0x38]
	gdtentry	SPARE4, 0, 0, 0			; selector [0x40]

GDT_END:

;------------------------------------------------------------------------------
; interrupt descriptor table (IDT)
;
; Note: The hardware IRQ's specified in this table are the normal PC/AT IRQ
; mappings. This implementation only uses the system timer and all other
; IRQs will remain masked. The descriptors for vectors 33 + are provided
; for convenience.
;------------------------------------------------------------------------------

%if X64
SYS_CODEXX_SEL	equ	SYS_CODE64_SEL
%else
SYS_CODEXX_SEL	equ	SYS_CODE_SEL
%endif

%macro	idtentry	1
%[%1]_SEL	equ	$ - IDT_BASE
	istruc	idtdescr
		at	idtdescr.selector
			dw SYS_CODEXX_SEL
		at	idtdescr.tattr
			db 0x8E	 ; 386 32-bit interrupt gate, present
	iend
%endmacro

;------------------------------------------------------------------------------

	align 2

idtr:
	dw	IDT_END - IDT_BASE - 1	; IDT limit
	dq	IDT_BASE		; will be adjusted at runtime

;------------------------------------------------------------------------------

	align 2

IDT_BASE:
	idtentry	DIV_ZERO	; divide by zero (INT 0)
	idtentry	DEBUG_EXCEPT	; debug exception (INT 1)
	idtentry	NMI		; NMI (INT 2)
	idtentry	BREAKPOINT	; soft breakpoint (INT 3)
	idtentry	OVERFLOW	; overflow (INT 4)
	idtentry	BOUNDS_CHECK	; bounds check (INT 5)
	idtentry	INVALID_OPCODE	; invalid opcode (INT 6)
	idtentry	DEV_NOT_AVAIL	; device not available (INT 7)
	idtentry	DOUBLE_FAULT	; double fault (INT 8)
	idtentry	RSVD_INTR1	; Coprocessor segment overrun - reserved (INT 9)
	idtentry	INVALID_TSS	; invalid TSS (INT 0x0A)
	idtentry	SEG_NOT_PRESENT	; segment not present (INT 0x0B)
	idtentry	STACK_FAULT	; stack fault (INT 0x0C)
	idtentry	GP_FAULT	; general protection (INT 0x0D)
	idtentry	PAGE_FAULT	; page fault (INT 0x0E)
	idtentry	RSVD_INTR2	; Intel reserved - do not use (INT 0x0F)
	idtentry	FLT_POINT_ERR	; floating point error (INT 0x10)
	idtentry	ALIGNMENT_CHECK	; alignment check (INT 0x11)
	idtentry	MACHINE_CHECK	; machine check (INT 0x12)
	idtentry	SIMD_EXCEPTION	; SIMD floating-point exception (INT 0x13)

	; 84 unspecified descriptors, First 12 of them are reserved, the rest are avail

%assign	i	0x14
%rep	84
	idtentry	UNSPEC%+i
%assign	i	(i + 1)
%endrep

	idtentry	IRQ0	; IRQ 0 (System timer) - (INT 0x68)
	idtentry	IRQ1	; IRQ 1 (8042 Keyboard controller) - (INT 0x69)
	idtentry	IRQ2	; Reserved - IRQ 2 redirect (IRQ 2) - DO NOT USE!!! - (INT 0x6A)
	idtentry	IRQ3	; IRQ 3 (COM 2) - (INT 0x6B)
	idtentry	IRQ4	; IRQ 4 (COM 1) - (INT 0x6C)
	idtentry	IRQ5	; IRQ 5 (LPT 2) - (INT 0x6D)
	idtentry	IRQ6	; IRQ 6 (Floppy controller) - (INT 0x6E)
	idtentry	IRQ7	; IRQ 7 (LPT 1) - (INT 0x6F)
	idtentry	IRQ8	; IRQ 8 (RTC Alarm) - (INT 0x70)
	idtentry	IRQ9	; IRQ 9 - (INT 0x71)
	idtentry	IRQ10	; IRQ 10 - (INT 0x72)
	idtentry	IRQ11	; IRQ 10 - (INT 0x73)
	idtentry	IRQ12	; IRQ 12 (PS/2 mouse) - (INT 0x74)
	idtentry	IRQ13	; IRQ 13 (Floating point error) - (INT 0x75)
	idtentry	IRQ14	; IRQ 14 (Secondary IDE) - (INT 0x76)
	idtentry	IRQ15	; IRQ 15 (Primary IDE) - (INT 0x77)

IDT_END:

;------------------------------------------------------------------------------

	align 2

BiosMemoryMap:
	dd	0
	times (32 * 20) db 0

;------------------------------------------------------------------------------

	align	4, db 0

PayloadDatum	equ	$
