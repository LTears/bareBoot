;------------------------------------------------------------------------------
;*
;*   Copyright (c) 2006 - 2007, Intel Corporation. All rights reserved.<BR>
;*   This program and the accompanying materials
;*   are licensed and made available under the terms and conditions of the BSD License
;*   which accompanies this distribution.  The full text of the license may be found at
;*   http://opensource.org/licenses/bsd-license.php
;*
;*   THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
;*   WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
;*
;*   boot1_XX.nasmb
;*
;*   boot1_XX.nasmb is built as 16-bit binary file in 512 bytes and patched to disk/partition's
;*   first section - boot sector.
;*
;*   The startup sequence for disk boot sector is:
;*
;*   1, LegacyBios check 0xAA55 signature at boot sectore offset 0x1FE to judget
;*      whether disk/partition is bootable.
;*   2, LegacyBios will load boot sector to 0x7C00 in real mode, pass BPB data and
;*      hand off control to 0x7C00 code.
;*   3, boot sector code simply parse FAT format in boot disk and find EfiLdr binary file
;*      and EfiVar.bin if exists. For first boot, EfiVar.bin does not exist.
;*   4, boot sector load the first sector of EfiLdr binary which is start.com to
;*      0x2000:0x0000 address.
;*   5, boot sector handoff control to 0x2000:0x0000 for startXX.com binary.
;*
;------------------------------------------------------------------------------

%include "fatXXhdr.nasm"

        BITS 16

LOADER_FILENAME_PART1     EQU     'EFIL'
%if FAT == 12
LOADER_FILENAME_PART2     EQU     'DR  '
LOADER_FILENAME_PART3     EQU     '    '
%endif
%if FAT == 16
LOADER_FILENAME_PART2     EQU     'DR16'
LOADER_FILENAME_PART3     EQU     '6   '
%endif
%if FAT == 32
LOADER_FILENAME_PART2     EQU     'DR20'
LOADER_FILENAME_PART3     EQU     '0   '
%endif

        org 0h

Ia32Jump:
  jmp   BootSectorEntryPoint
  nop

  fatXXhdr FAT

BootSectorEntryPoint:

; ****************************************************************************
; Start Print
; ****************************************************************************
  mov  si, StartString
  call PrintString

; ****************************************************************************
; Print over
; ****************************************************************************

  mov   ax, cs         ; ax = 0
  mov   ss, ax         ; ss = 0
  add   ax, 1000h
  mov   ds, ax

  mov   sp, 07C00h     ; sp = 0x7C00
  mov   bp, sp         ; bp = 0x7C00

  mov   ah, 8                         ; ah = 8 - Get Drive Parameters Function
  mov   byte [bp + PhysicalDrive], dl ; BBS defines that BIOS would pass the booting driver number to the loader through DL
  int   13h                           ; Get Drive Parameters
  xor   ax, ax                        ; ax = 0
  mov   al, dh                        ; al = dh (number of sides (0 based))
  inc   al                            ; MaxHead = al + 1
  push  ax                            ; 0000:7BFE = MaxHead
  mov   al, cl                        ; al = cl (CL = sectors per track)
  and   al, 03Fh                      ; MaxSector = al & 0x3F
  push  ax                            ; 0000:7BFC = MaxSector

  cmp   word [bp + SectorSignature], 0AA55h ; Verify Boot Sector Signature
  jne   BadBootSector
  mov   cx, word [bp + RootEntries]      ; cx = RootEntries
  shl   cx, FAT_DIRECTORY_ENTRY_SHIFT    ; cx = cx * 32 = cx * sizeof(FAT_DIRECTORY_ENTRY) = Size of Root Directory in bytes
  mov   bx, cx                           ; bx = size of the Root Directory in bytes
  and   bx, FAT_BLOCK_MASK               ; See if it is an even number of sectors long
  jne   BadBootSector                    ; If is isn't, then the boot sector is bad.
  mov   bx, cx                           ; bx = size of the Root Directory in bytes
  shr   bx, FAT_BLOCK_SHIFT              ; bx = size of Root Directory in sectors
  mov   al, byte [bp + NumFats]          ; al = NoFats
  xor   ah, ah                           ; ah = 0  ==> ax = NoFats
%if (FAT == 32)
  mul   word [bp + SectorsPerFat32]      ; ax = NoFats * SectorsPerFat
%else
  mul   word [bp + SectorsPerFat]        ; ax = NoFats * SectorsPerFat
%endif
  add   ax, word [bp + ReservedSectors]  ; ax = NoFats * SectorsPerFat + ReservedSectors = RootLBA
  add   ax, bx                           ; ax = NoFats * SectorsPerFat + ReservedSectors + RootDirSectors = FirstClusterLBA (FirstDataSector)
  mov   word [bp], ax                    ; Save FirstClusterLBA (FirstDataSector) for later use
%if (FAT == 32)
  mov   ax, word [bp + RootCluster]      ; ax = StartCluster of Root Directory
  sub   ax, 2                            ; ax = StartCluster - 2
  xor   bh, bh
  mov   bl, byte [bp + SectorsPerCluster]; bx = SectorsPerCluster
  mul   bx                               ; ax = (StartCluster - 2) * SectorsPerCluster
  add   ax, word [bp]                    ; ax = FirstClusterLBA + (StartCluster - 2) * SectorsPerCluster
%endif

  push  ds
  pop   es
  xor   di, di                           ; Store directory in es:di = 1000:0000
  call  ReadBlocks                       ; Read entire Root Directory

  ; dx - variable storage (initial value is 0)
  ; bx - loader (initial value is 0)
  xor   dx, dx
  xor   bx, bx

FindEFILDR:
  cmp   dword [di + 0], LOADER_FILENAME_PART1         ; Compare to "EFIL"
  jne   FindVARSTORE
  cmp   dword [di + 4], LOADER_FILENAME_PART2
  jne   FindVARSTORE
  cmp   dword [di + 7], LOADER_FILENAME_PART3
  jne   FindVARSTORE
  mov   bx, word [di + 26]                ; bx = Start Cluster for EFILDR  <---
  test  dx, dx
  je    FindNext                          ; Efivar.bin is not loaded yet
  jmp   FoundAll

FindVARSTORE:
  ; if the file is not loader file, see if it's "EFIVAR  BIN"
  cmp   dword [di + 0], 'EFIV'
  jne   FindNext
  cmp   dword [di + 4], 'AR  '
  jne   FindNext
  cmp   dword [di + 7], ' BIN'
  jne   FindNext
  mov   dx, di                            ; dx = Offset of Start Cluster for Efivar.bin <---
  add   dx, 26
  test  bx, bx
  je    FindNext                          ; Efildr is not loaded yet
  jmp   FoundAll

FindNext:
  ; go to next find
  add   di, FAT_DIRECTORY_ENTRY_SIZE
  sub   cx, FAT_DIRECTORY_ENTRY_SIZE
  ; TODO: jump to FindVarStore if ...
  jne   FindEFILDR
  jmp   NotFoundAll

FoundAll:
FoundEFILDR:                                 ; 0x7CFE
  mov     cx, bx                             ; cx = Start Cluster for EFILDR  <---
  mov     ax, cs                             ; Destination = 2000:0000
  add     ax, 2000h
  mov     es, ax
  xor     di, di
ReadFirstClusterOfEFILDR:
  mov     ax, cx                             ; ax = StartCluster
  sub     ax, 2                              ; ax = StartCluster - 2
  xor     bh, bh
  mov     bl, byte [bp + SectorsPerCluster]  ; bx = SectorsPerCluster
  push    dx
  mul     bx
  pop     dx                                 ; ax = (StartCluster - 2) * SectorsPerCluster
  add     ax, word [bp]                      ; ax = FirstClusterLBA + (StartCluster - 2) * SectorsPerCluster
  xor     bh, bh
  mov     bl, byte [bp + SectorsPerCluster]  ; bx = Number of Sectors in a cluster
  push    es
  call    ReadBlocks
  pop     ax
JumpIntoFirstSectorOfEFILDR:
  mov     word [bp + JumpSegment], ax        ; 0x7D26 ???
  jmp      2000h:0000h
JumpSegment EQU ($ - 2)


PrintString:
  mov  ax, 0B800h
  mov  es, ax
  mov  ax, 07C0h
  mov  ds, ax
  mov  cx, ((ErrorString - StartString) / 2)
  mov  di, 160
  rep  movsw
  ret

; ****************************************************************************
; ReadBlocks - Reads a set of blocks from a block device
;
; AX    = Start LBA
; BX    = Number of Blocks to Read
; ES:DI = Buffer to store sectors read from disk
; ****************************************************************************

; cx = Blocks
; bx = NumberOfBlocks
; si = StartLBA

ReadBlocks:
  pusha
  add     eax, dword [bp + LBAOffsetForBootSector] ; Add LBAOffsetForBootSector to Start LBA
  add     eax, dword [bp + HiddenSectors]          ; Add HiddenSectors to Start LBA
  mov     esi, eax                               ; esi = Start LBA
  mov     cx, bx                                 ; cx = Number of blocks to read

ReadCylinderLoop:
  mov     bp, 07BFCh     ; bp = 0x7bfc (XXX: ???)
  mov     eax, esi       ; eax = Start LBA
  xor     edx, edx       ; edx = 0
  movzx   ebx, word [bp] ; bx = MaxSector
  div     ebx            ; ax = StartLBA / MaxSector
  inc     dx             ; dx = (StartLBA % MaxSector) + 1
  sub     bx, dx         ; bx = MaxSector - Sector
  inc     bx             ; bx = MaxSector - Sector + 1
  cmp     cx, bx         ; Compare (Blocks) to (MaxSector - Sector + 1)
  jg      LimitTransfer
  mov     bx, cx         ; bx = Blocks

LimitTransfer:
  push    cx
  mov     cl, dl        ; cl = (StartLBA % MaxSector) + 1 = Sector
  xor     dx, dx        ; dx = 0
  div     word [bp + 2] ; ax = ax / (MaxHead + 1) = Cylinder
                        ; dx = ax % (MaxHead + 1) = Head

  push    bx                            ; Save number of blocks to transfer
  mov     dh, dl                        ; dh = Head
  mov     bp, 07C00h                    ; bp = 0x7C00
  mov     dl, byte [bp + PhysicalDrive] ; dl = Drive Number
  mov     ch, al                        ; ch = Cylinder
  mov     al, bl                        ; al = Blocks
  mov     ah, 2                         ; ah = Function 2 (XXX: 42h?)
  mov     bx, di                        ; es:bx = Buffer address
  int     013h
  jc      DiskError
  pop     bx
  pop     cx
  movzx   ebx, bx
  add     esi, ebx                      ; StartLBA = StartLBA + NumberOfBlocks
  sub     cx, bx                        ; Blocks = Blocks - NumberOfBlocks
  mov     ax, es
  shl     bx, (FAT_BLOCK_SHIFT - 4)
  add     ax, bx
  mov     es, ax                        ; es:di = es:di + NumberOfBlocks * BLOCK_SIZE
  cmp     cx, 0
  jne     ReadCylinderLoop
  popa
  ret

; ****************************************************************************
; ERROR Condition:
; ****************************************************************************
NotFoundAll:                            ; 0x7DA6
  ; if we found EFILDR, continue
  test bx, bx
  jne  FoundEFILDR
BadBootSector:
DiskError:
  mov  si, ErrorString
  call PrintString
Halt:
  jmp   Halt

StartString:
  db 'B', 0Ch, 'S', 0Ch, 't', 0Ch, 'a', 0Ch, 'r', 0Ch, 't', 0Ch
ErrorString:
  db 'B', 0Ch, 'E', 0Ch, 'r', 0Ch, 'r', 0Ch, 'o', 0Ch, 'r', 0Ch

; ****************************************************************************
; LBA Offset for BootSector, need patched by tool for HD boot.
; ****************************************************************************

;;  org 1FAh
  times (1FAh - ($ - $$)) db 0
LBAOffsetForBootSector:
  dd        0h

; ****************************************************************************
; Sector Signature
; ****************************************************************************

;;  org 01feh
SectorSignature:
  dw        0AA55h      ; Boot Sector Signature
