

;
; +-------------------------------------------------------------------------+
; |	This file is generated by The Interactive Disassembler (IDA)	    |
; |	Copyright (c) 2007 by DataRescue sa/nv,	<ida@datarescue.com>	    |
; | Licensed to: Mach EDV Dienstleistungen, Jan	Mach, 1	user, adv, 11/2007  |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	9E73B90354BE35AD53A96B4B87BCBC81

; File Name   :	/Users/sunny/src/edk2/bareBoot/BootSector/bin/St_gpt_iT2.com
; Format      :	MS-DOS COM-file
; Base Address:	1000h Range: 10100h-10F00h Loaded length: E00h

		.686p
		.mmx
		.model tiny

; ===========================================================================

; Segment type:	Pure code
seg000		segment	byte public 'CODE' use16
		assume cs:seg000
		org 100h
		assume es:nothing, ss:nothing, ds:seg000, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public start
start		proc near
		jmp	short loc_10126
; ---------------------------------------------------------------------------
		db 45h,	0Ch, 6Dh, 0Ch, 36h, 0Ch, 34h, 0Ch, 54h,	0Ch, 20h
		db 0Ch,	55h, 0Ch, 6Eh, 0Ch, 73h, 0Ch, 75h, 0Ch,	70h, 0Ch
		db 70h,	0Ch, 6Fh, 0Ch, 72h, 0Ch, 74h, 0Ch, 65h,	0Ch, 64h
		db 0Ch,	21h, 0Ch
; ---------------------------------------------------------------------------

loc_10126:				; CODE XREF: startj
		mov	ax, cs
		mov	ds, ax
		mov	es, ax
		assume es:seg000
		mov	ss, ax
		assume ss:seg000
		mov	sp, 0FE0h
		mov	ebx, 0
		lea	edi, byte_10B5A

loc_1013C:				; CODE XREF: start+5Cj
		mov	eax, 0E820h
		mov	ecx, 14h
		mov	edx, 534D4150h
		int	15h
		jb	short loc_1015E
		add	edi, 14h
		cmp	ebx, 0
		jz	short loc_1015E
		jmp	short loc_1013C
; ---------------------------------------------------------------------------

loc_1015E:				; CODE XREF: start+50j	start+5Aj
		lea	eax, byte_10B5A
		sub	edi, eax
		mov	dword_10B56, edi
		xor	ebx, ebx
		mov	bx, cs
		shl	ebx, 4
		lea	eax, [ebx+374h]
		mov	dword_10370, eax
		lea	eax, [ebx+3C6h]
		mov	dword_103BE, eax
		lea	edx, [ebx+0B56h]
		mov	ax, 2401h
		int	15h
		jnb	short loc_101B9
		call	sub_10261
		jnz	short loc_101B9
		out	0EDh, ax
		mov	al, 0D1h
		out	64h, al		; AT Keyboard controller 8042.
		call	sub_10261
		jnz	short loc_101B9
		mov	al, 0DFh
		out	60h, al		; AT Keyboard controller 8042.
		call	sub_10261
		mov	cx, 19h

loc_101B5:				; CODE XREF: start+B7j
		out	0EDh, ax
		loop	loc_101B5

loc_101B9:				; CODE XREF: start+99j	start+9Ej ...
		cli
		lea	eax, dword_102EA
		add	eax, 20006h
		mov	dword_102EA, eax
		lea	eax, dword_10328
		add	eax, 20006h
		mov	dword_10328, eax
		db	66h
		lgdt	fword ptr byte_1036E
		mov	eax, cr0
		or	eax, 1
		mov	cr0, eax
		jmp	large far ptr 10h:0
start		endp

; ---------------------------------------------------------------------------
		db 66h,	0B8h, 8, 0, 8Eh, 0D8h, 8Eh, 0C0h, 8Eh, 0D0h, 0Fh
		db 20h,	0E0h, 66h, 0Fh,	0BAh, 0E8h, 5, 0Fh, 22h, 0E0h
		db 0B8h, 2 dup(0), 9, 0, 0Fh, 22h, 0D8h, 0B9h, 80h, 2 dup(0)
		db 0C0h, 0Fh, 32h, 0Fh,	0BAh, 0E8h, 8, 0Fh, 30h, 0Fh, 20h
		db 0C0h, 0Fh, 0BAh, 0E8h, 1Fh, 0Fh, 22h, 0C0h, 0EBh, 0
		db 67h,	0EAh, 4	dup(0),	38h, 0,	66h, 0B8h, 30h,	0, 8Eh
		db 0D8h, 66h, 0B8h, 18h, 0, 8Eh, 0C0h, 8Eh, 0D0h, 8Eh
		db 0D8h, 0BDh, 2 dup(0), 40h, 0, 0BBh, 2 dup(0), 7, 0
		db 48h,	33h, 0C0h, 66h,	0B8h, 0BCh, 3, 48h, 5, 2 dup(0)
		db 2, 0, 0Fh, 1, 18h, 48h, 0C7h, 0C0h, 0, 10h, 2, 0, 50h
		db 0C3h

; =============== S U B	R O U T	I N E =======================================


sub_10261	proc near		; CODE XREF: start+9Bp	start+A6p ...
		mov	cx, 0

loc_10264:				; CODE XREF: sub_10261+9j
		out	0EDh, ax
		in	al, 64h		; AT Keyboard controller 8042.
		and	al, 2
		loopne	loc_10264
		retn
sub_10261	endp

; ---------------------------------------------------------------------------
		align 2
		db 47h,	0Dh dup(0), 2 dup(0FFh), 3 dup(0), 92h,	0CFh, 0
		db 2 dup(0FFh),	3 dup(0), 9Ah, 0CFh, 0,	2 dup(0FFh), 3 dup(0)
		db 92h,	0CFh, 0, 2 dup(0FFh), 3	dup(0),	9Ah, 0CFh, 9 dup(0)
		db 2 dup(0FFh),	3 dup(0), 92h, 0CFh, 0,	2 dup(0FFh), 3 dup(0)
		db 9Ah,	0AFh, 9	dup(0),	8Fh, 7,	0Ah dup(0), 38h, 2 dup(0)
		db 8Eh,	0Ch dup(0), 38h, 2 dup(0), 8Eh,	0Ch dup(0), 38h
		db 0
dword_102EA	dd 8E00h		; DATA XREF: start+BAo	start+C5w
		db 0Ah dup(0), 38h, 2 dup(0), 8Eh, 0Ch dup(0), 38h, 2 dup(0)
		db 8Eh,	0Ch dup(0), 38h, 2 dup(0), 8Eh,	0Ch dup(0)
dword_10328	dd 8E000038h		; DATA XREF: start+C9o	start+D4w
		db 0Ch dup(0), 38h, 2 dup(0), 8Eh, 0Ch dup(0), 38h, 2 dup(0)
		db 8Eh,	0Ch dup(0), 38h, 2 dup(0), 8Eh,	0Ch dup(0), 38h
		db 2 dup(0), 8Eh, 2 dup(0)
byte_1036E	db 2 dup(0)		; DATA XREF: start+D8r
dword_10370	dd 0			; DATA XREF: start+7Cw
		align 8
		db 38h,	2 dup(0), 8Eh, 0Ch dup(0), 38h,	2 dup(0), 8Eh
		db 0Ch dup(0), 38h, 2 dup(0), 8Eh, 0Ch dup(0), 38h, 2 dup(0)
		db 8Eh,	0Ch dup(0), 38h, 2 dup(0), 8Eh,	2 dup(0)
dword_103BE	dd 0			; DATA XREF: start+88w
		align 8
		db 38h,	2 dup(0), 8Eh, 0Ch dup(0), 38h,	2 dup(0), 8Eh
		db 0Ch dup(0), 38h, 2 dup(0), 8Eh, 0Ch dup(0), 38h, 2 dup(0)
		db 8Eh,	55Ch dup(0), 38h, 2 dup(0), 8Eh, 0Ch dup(0), 38h
		db 2 dup(0), 8Eh, 0Ch dup(0), 38h, 2 dup(0), 8Eh, 0Ch dup(0)
		db 38h,	2 dup(0), 8Eh, 0Ch dup(0), 38h,	2 dup(0), 8Eh
		db 0Ch dup(0), 38h, 2 dup(0), 8Eh, 0Ch dup(0), 38h, 2 dup(0)
		db 8Eh,	0Ch dup(0), 38h, 2 dup(0), 8Eh,	0Ch dup(0), 38h
		db 2 dup(0), 8Eh, 0Ch dup(0), 38h, 2 dup(0), 8Eh, 0Ch dup(0)
		db 38h,	2 dup(0), 8Eh, 0Ch dup(0), 38h,	2 dup(0), 8Eh
		db 0Ch dup(0), 38h, 2 dup(0), 8Eh, 0Ch dup(0), 38h, 2 dup(0)
		db 8Eh,	0Ch dup(0), 38h, 2 dup(0), 8Eh,	0Ch dup(0), 38h
		db 2 dup(0), 8Eh, 10Ah dup(0)
dword_10B56	dd 0			; DATA XREF: start+66w
byte_10B5A	db 386h	dup(0),	0CDh, 8, 0CFh, 0CDh, 9,	0CFh, 0CDh, 0Ah
					; DATA XREF: start+37o
					; start:loc_1015Eo
		db 0CFh, 0CDh, 0Bh, 0CFh, 0CDh,	0Ch, 0CFh, 0CDh, 0Dh, 0CFh
		db 0CDh, 0Eh, 0CFh, 0CDh, 0Fh, 0CFh, 6 dup(0), 55h, 0AAh
seg000		ends


		end start
